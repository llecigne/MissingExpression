//------------------------------------------------------------------------------
//--- Aspect oriented programming extension ------------------------------------
//------------------------------------------------------------------------------
Function.prototype.applyBefore = function(aspect) 
{
    var next = this;
    var callee = function()
    {
	aspect.apply(this, arguments);
	next.apply(this, arguments);
    }
    callee.next     = function() { return next; };
    callee.original = function() { for (var f = callee; 'next' in f; f = f.next()) {}; return f; };
    return callee;
}

Function.prototype.applyAfter = function(aspect) 
{
    var next = this;
    var callee = function()
    {
	next.apply(this, arguments);
	aspect.apply(this, arguments);
    }
    callee.toString = function() { return next.toString(); }
    callee.original = function() { for (var f = callee; 'next' in f; f = f.next) {}; return f; };
    return callee;
}

Function.prototype.applyAround = function(aspect)
{
    var next = this;
    var target, args;
    var callNext = function() { 
	return (arguments.length == 0 ? 
		next.apply(target, args) :
		next.apply(target, arguments));
    };
    callee = function()
    {
	target = this;
	args = arguments;
	aspect.callNext = callNext;
	return aspect.apply(this, arguments);
    }
    for (var member in aspect)
	callee[member] = aspect[member];
    for (var member in this)
	callee[member] = this[member];
    callee.next = function() { return next; };
    callee.original = function() { delete(aspect, callNext); for (var f = callee; 'next' in f; f = f.next()) {}; return f; };
    return callee;
}

Object.applyAspect = function(object, aspect, when)
{
    var method;
    switch (when)
    {
	case 'before': 
	    method = Function.prototype.applyBefore;
	    break;
	case 'after':
	    method = Function.prototype.applyAfter;
	    break;
        default: 
	    method = Function.prototype.applyAround;
    }
    if (object instanceof Function)
	object = object.prototype;
    for (var member in object) 
    {
        var memberImpl = object[member];
        if (memberImpl instanceof Function)
        {
            object[member] = method.call(this, memberImpl, aspect);
        }
    }
}

Object.applyBefore = function(object, aspect)
{
    return Object.applyAspect(object, aspect, 'before');
}

Object.applyAfter = function(object, aspect)
{
    return Object.applyAspect(object, aspect, 'after');
}

Object.applyAround = function(object, aspect)
{
    return Object.applyAspect(object, aspect, 'around');
}
